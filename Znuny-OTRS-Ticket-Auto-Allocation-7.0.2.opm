<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Znuny-OTRS-Ticket-Auto-Allocation</Name>
    <Version>7.0.2</Version>
    <Vendor>mo-azfar</Vendor>
    <URL>https://github.com/mo-azfar/OTRS-Ticket-Auto-Allocation</URL>
    <License>GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007</License>
    <ChangeLog Version="6.0.1">1st release.</ChangeLog>
    <ChangeLog Version="6.0.2">Include online user check. Change file directory. Update framework</ChangeLog>
    <ChangeLog Version="6.5.1">Update supported framework 6.5.x. Update version to reflex latest supported framework</ChangeLog>
    <ChangeLog Version="7.0.1">Update supported framework 7.0.x.</ChangeLog>
    <ChangeLog Version="7.0.2">Add support for offline user and responsible allocation.</ChangeLog>
    <Description Lang="en">Auto assigning incoming ticket (from email) to the online or offline agent.</Description>
    <Framework>6.1.x</Framework>
    <Framework>6.2.x</Framework>
    <Framework>6.3.x</Framework>
    <Framework>6.4.x</Framework>
    <Framework>6.5.x</Framework>
    <Framework>7.0.x</Framework>
    <IntroInstall Lang="en" Title="Install Information" Type="pre">
        &lt;br&gt;
        &lt;b&gt;WELCOME&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        You are about to install the package Znuny-OTRS-Ticket-Auto-Allocation.Check &lt;a href='https://github.com/mo-azfar/OTRS-Ticket-Auto-Allocation' target='_blank'&gt;README&lt;/a&gt;&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;
    </IntroInstall>
    <IntroUpgrade Lang="en" Title="Upgrade Information" Type="pre">
        &lt;br&gt;
        &lt;b&gt;IMPORTANT!! Please update Generic Agent to match the new param key and value&lt;/b&gt;
        &lt;br&gt;
        &lt;br&gt;
        Check &lt;a href='https://github.com/mo-azfar/OTRS-Ticket-Auto-Allocation' target='_blank'&gt;README&lt;/a&gt;&lt;br&gt;
        &lt;br&gt;
        &lt;br&gt;
        ((enjoy))&lt;br&gt;
        &lt;br&gt;
    </IntroUpgrade>
    <ModuleRequired>List::Util</ModuleRequired>
    <CodeInstall Type="post">
$Kernel::OM-&gt;Get('Kernel::System::GenericAgent')-&gt;JobAdd(
        Name =&gt; 'ZZZTicket AutoAllocation',
        Data =&gt; {
            'EventValues' =&gt; [
                           'TicketCreate'
                         ],
			'TicketNumber' =&gt; '*',
            'OwnerIDs' =&gt; [
                          '1'
                        ],
            'LockIDs' =&gt; [
                         '1'
                       ],
            'StateIDs' =&gt; [
                          '1'
                        ],
            'NewModule' =&gt; 'Kernel::System::GenericAgent::TicketAutoAllocation',
            'NewParamKey1' =&gt; 'Allocation',
            'NewParamValue1' =&gt; 'Owner',
            'NewParamKey2' =&gt; 'Online',
            'NewParamValue2' =&gt; 'Yes',
            'Valid' =&gt; 1,
        },
        UserID =&gt; 1,
    );
</CodeInstall>
    <CodeUninstall Type="post">
$Kernel::OM-&gt;Get('Kernel::System::GenericAgent')-&gt;JobDelete(
        Name =&gt; 'ZZZTicket AutoAllocation',
        UserID =&gt; 1,
    );
</CodeUninstall>
    <BuildDate>2023-12-28 22:25:01</BuildDate>
    <BuildHost>app.wsl.my</BuildHost>
    <Filelist>
        <File Location="Custom/Kernel/System/GenericAgent/TicketAutoAllocation.pm" Permission="660" Encode="Base64"></File>
    </Filelist>
</otrs_package>